#include <iostream>
#include <cstdio>
#include <ctime>
// #include"swap.h"
// #include<map>
//#include<bits/stdc++.h> //万能头
// #include <iomanip>
using namespace std;
#include <string>
/*
main是一个程序的入口,
每个程序都必须有这么一个函数,
有且仅有一个
*/
// #define day 7 //宏常量:#define 常量名 常量值
// int add(int num1, int num2){   //num1 和 num2没有实际数据,称为形参
//     int sum = num1 + num2;
//     return sum;
// }
// void swap(int num1, int num2){   //如果函数不需要返回值,声明的时候可以写void
//     cout << "交换前: " << endl;
//     cout << "num1 = " << num1 << endl;
//     cout << "num2 = " << num2 << endl;
//     int temp = num1;
//     num1 = num2;
//     num2 = temp;
//     cout << "交换后: " << endl;
//     cout << "num1 = " << num1 << endl;
//     cout << "num2 = " << num2 << endl;
//     return;   //不需要返回值时也可以不写
// }
// int max(int a, int b); //函数的声明(现在有的编译器可以直接识别主函数下的函数,不需要声明)
// int max(int a, int b);
// int max(int a, int b); //可以声明多次
// void swap02(int *p1, int *p2){
//     int temp = *p1;
//     *p1 = *p2;
//     *p2 = temp;
//     cout << *p1 << endl;
//     cout << *p2 << endl;
//     return;
// }
// struct student {
//         string name;
//         int age;
//         int score;
//     };
// void printStudent(struct student s){ //结构体作函数参数值传递
//     s.age = 100; //值传递不修改形参
//     cout << " 姓名: " << s.name
//          << " 年龄: " << s.age
//          << " 分数: " << s.score << endl;
//     return;
// }
// void printStudent_(const student *s){  //将函数中的形参改为指针,可以减少内存空间,而且不会复制新的副本出来
//     // s -> age = 200; //地址传递会修改形参 //加入const之后一旦有修改的操作就会报错,可以防止误操作
//     cout << " 姓名: " << s -> name
//          << " 年龄: " << s -> age
//          << " 分数: " << s -> score << endl;
// }
int main()
{    
    // int a = 10;//变量创建: 变量类型 变量名 = 变量初始值
    // const int b = 20; //const 数据类型 常量名 = 常量值
    // cout << a << endl;
    // cout << "一周有" << day << "天" << endl;//常量不可修改
    // /*****************************************************/
    // int num1 = 114514;
    // int num2 = 1919810;
    // int sum = num1 + num2;
    // cout << sum << endl;
    // /****************************************************/
//数据类型
    //整型int
    // short a1 = 32767;           //短整型(-2^15(-32768)~2^15-1(32767))
    // int b1 = 9999;              //整型(-2^31~2^31-1)
    // long c = 45645;             //长整型(-2^31~2^31-1)
    // long long d = 13498764654;   //长长整型(-2^63~2^63-1)
    // // cout << a1 + b1 + c + d << endl;
    // cout << "占用内存为(字节): " << sizeof(short) << " "  << sizeof(int) << " " << sizeof(long)  << " "  << sizeof(long long) << endl;
/******************************************************/
    //实型(浮点型)float
    // float a = 3.14159265358979f; //单精度(7位有效数字)(末尾记得加f)
    // double b = 3.14159265358979; //双精度(15~16位有效数字)  默认是双精度  且cout默认最多表示6位有效数字
    // cout << fixed << setprecision(20) << a << endl;
    // cout << fixed << setprecision(20) << b << endl;
    // cout << sizeof(float) << endl;
    // float a = 3e2; //科学计数法:3*10^2
    // float b = 3e-2 //科学计数法:3*10^-2
/******************************************************/
    // 字符型
    // char ch = 56; //只能用单引号和一个字符,或一个数字(即字符的ASCII码)
    // char nm = 'a';
    // putchar(ch);
    // cout<< " " << ch << " " << nm << endl;
    // cout << (int)nm << endl; //ASCII码 a-97;A-65
/******************************************************/
    //转义字符
    //1.换行符:\n  2.反斜杠:\\  3.水平制表符:\t -> 整齐输出数据
    // cout << "hello world\n";
    // cout << "\\" << endl;
    // cout << "aaaa\thello world\n"; //\t前占用8个位置
    // cout << "aa\thello world\n";
    // cout << "aaaaaa\thello world\n";
/******************************************************/
    //字符串型string
    // char str1[] = "hello world"; //C风格:char 变量名[] = "字符串值"(注意双引号)
    // string str2 = "hello world"; //C++风格,注意要写头文件 #include<string>
    // cout << str1 << " " << str2 << endl;
/******************************************************/
    //布尔类型bool
    // bool flag = true;
    // cout << flag << endl;
    // flag = false;
    // cout << flag << endl; //本质上 1代表真,0代表假
/******************************************************/
    //数据的输入
    // int a = 0;
    // cout << "请给整型变量a赋值" << endl;
    // cin >> a;
    // cout << "整型变量a = " << a << endl;
    // bool flag = false;
    // cout << "请给布尔类型flag赋值" << endl;     //因为布尔类型本质是整型,只能依靠整数转换,输入的0.1会在编译时被直接去掉小数,即0.1变为0                                   
    // cin >> flag;                                //注意bool只能输入整型,所有非零整型输出结果均为1(true),若输入字符串,输出结果默认为0(false)
    // cout << "flag = " << flag << endl; 
/******************************************************/
//运算符
    //算数运算符(+,-,*,/,%,++,--)
    // int a = 10;
    // int b = 3;
    // cout << a+b << endl;    //int a = 10;
    // cout << a-b << endl;    //float b = 0.0f;
    // cout << a*b << endl;    //cout << a/b << endl;      //除数为浮点型的0时有意义 输出结果为inf(无穷)                            
    // cout << a/b << endl;    //两个整数相除,结果依然是整数,将小数部分去除;两个小数可以相除,结果可以是小数(若除不尽最多保留6位有效数字,若结果是整数,则直接输出整数,无小数部分)
    // cout << a % b << endl;  //取余(取模) 取模本质是求余数
    // cout << ++a << endl; //前置递增     //两者区别:前置递增:先让变量+1 再进行表达式的运算
    // cout << a++ << endl; //后置递增     //         后置递增:先进行表达式的运算,在让变量+1
    //cout << --a << endl;
    //cout << a-- << endl; //类推
/******************************************************/
    //赋值运算符(=,+=,-=,*=,/=,%=)
    //类比python
/******************************************************/
    //比较运算符(==,!=,<,>,<=,>=)
    //类比python
    //cout << (3>4) << endl; //记住要打小括号
/******************************************************/
    //逻辑运算符(!(??),&&(??),||(??))
    //非  !a    如果a为真,则!a为假;若a为假,则!a为真(相当于not)(真变假,假变真)
    //与  a&&b  如果a和b都为真,则结果为真,否则为假(相当于and)(同真为真,其余为假)
    //或  a||b  如果a与b有一个为真,则结果为真,二者都为假时,结果为假(相当于or)(同假为假,其余为真)
/******************************************************/
    //程序流程结构(顺序结构,选择结构,循环结构)
  //选择结构
    //单行格式if语句(if(条件){条件满足执行的语句})
    // int score = 0;
    // cout << "请输入一个分数: " << endl;
    // cin >> score;
    // cout << "您输入的分数为: " << score << endl;
    // if(score > 600)/*不要加分号!!!*/{
    //     cout << "恭喜你考上一本大学" << endl;
    // }
/******************************************************/
    //多行格式if语句(if(条件){条件满足执行的语句}else{条件不满足执行的语句})
    // int score = 0;
    // cout << "请输入一个分数: " << endl;
    // cin >> score;
    // cout << "您输入的分数为: "  << score << endl;
    // if(score > 600){
    //     cout << "恭喜你考上一本大学!" << endl;
    // }
    // else{
    //     cout << "很遗憾你没有考上一本大学" << endl;
    // }
/******************************************************/
    //多条件的if语句(if(条件1){条件1满足执行的语句}else if(条件2){条件2满足执行的语句}...else{都不满足执行的语句})
    // int score = 0;
    // cout << "请输入一个分数: " << endl;
    // cin >> score;
    // cout << "您输入的分数为 " << score << endl;
    // if(score > 600){
    //     cout << "恭喜你考上一本大学!" << endl;
    // }
    // else if(score > 500){
    //     cout << "恭喜你考上二本大学!" << endl;
    // }
    // else if(score > 400){
    //     cout << "恭喜你考上三本大学!" << endl;
    // }
    // else{
    //     cout << "很遗憾你没考上本科!" << endl;
    // }
/******************************************************/
    //嵌套if语句
    // int score = 0;
    // cout << "请输入一个分数 :" << endl;
    // cin >> score;
    // cout << "您输入的分数为 :" << score << endl;
    // if(score > 600){
    //     cout << "恭喜你考上一本大学" << endl;   
    //     if(score > 700){
    //         cout << "恭喜你考上北大" << endl;
    //     }
    //     else if(score > 650){
    //         cout << "恭喜你考上清华" << endl;
    //     }
    //     else{
    //         cout << "恭喜你考上人大" << endl;
    //     }
    // }
    // else if(score > 500){
    //     cout << "恭喜你考上二本大学" << endl;
    // }
    // else if(score > 400){
    //     cout << "恭喜你考上三本大学" << endl;
    // }
    // else{
    //     cout << "很遗憾你没有考上本科" << endl;
/******************************************************/   
	//三目运算符(表达式1 ? 表达式2 : 表达式3) //若表达式1的值为真,执行表达式2并返回表达式2的值;若为假,则表达式3)
	//	int a = 10;
	//	int b = 20;
	//	int c = 0;
	//	c = (a > b ? a : b);
	//	cout << "c = " << c << endl; //在cpp中三目运算符返回的是变量,可以继续赋值
/******************************************************/
	//switch语句
	//int score = 0;					//if和switch区别:switch缺点:判断只能是整型或字符型,不能是区间
	//cout << "请给电影评分: " << endl;                    //优点:结构清晰,执行效率高	
	//cin >> score;
	//switch(score){
	//	case 10:
	//	case 9:
	//	  cout << "您认为是经典电影" << endl;
	//	  break;
	//	case 8:
	//	case 7:
	//	  cout << "您认为电影非常好" << endl;
	//	  break;
	//	case 6:
	//	case 5:
	//		cout << "您认为电影一般" << endl;
	//		break;
	//	default:
	//		cout << "您认为这是烂片" << endl;
	//		break;
	//}
/******************************************************/	
	//循环结构
	//while循环语句(while(循环条件){循环语句}) //只要循环条件的结果为真,就执行循环语句
	// int num = 0;
	// while(num< 10){
	// 	cout << num << endl;
	// 	num += 1;
	// }
    //注:随机数(rand()%整数 -> 范围-1),添加随机数种子,作为利用当前系统时间生成的随机数,防止每次随机数都一样(srand((unsigned int)time(NULL/0))),但是需要头文件#include<ctime>
    // int a;
    // srand((unsigned int)time(0));
    // a = rand()%1000 + 1;
    // cout << "a = " << a << endl;
/******************************************************/	
    //do...while循环语句(do{循环语句} while{循环条件};) //与while的区别在于do...while会先执行一次循环语句,再判断循环条件
    // int num = 0;
    // do{
    //     cout << num << endl;
    //     num++;
    // }while(num < 10);
/******************************************************/
	//for循环(起始表达式;条件表达式;末尾循环体){循环语句;}
    // for(int i = 0; i < 10; i++ ){
    //     cout << i << endl;
    // }
    // int i = 0;
    // for(; ; ){
    //     if( i >= 10){
    //         break;
    //     }
    //     cout << i << endl;
    //     i++;
    // }  //for循环可化简此代码为上代码
/******************************************************/
    //嵌套循环(在循环体中再循环一层循环,解决一些实际问题)
    // for(int i = 1; i <= 10; i++){
    //     for(int j = 1; j <= 10; j++){
    //         cout << "* ";
    //     }
    //     cout << endl;
    // }  //(10*10星图)
/******************************************************/
    //跳转语句
    //break语句(用于跳出选择结构或者循环结构)
    //1.出现在switch语句中
    // cout << "请选择副本难度 " << endl;
    // cout << "1.普通" << endl; 
    // cout << "2.中等" << endl;
    // cout << "3.困难" << endl;
    // int select;
    // cin >> select;
    // switch(select){
    //     case 1:
    //         cout << "您选择的是普通难度" << endl;
    //         break
    //     case 2:
    //         cout << "您选择的是中等难度" << endl;
    //         break
    //     case 3:
    //         cout << "您选择的是困难难度" << endl;
    //         break
    //     default:
    //         break    
    // }
    //2.出现在循环语句中
    // for(int i = 1; i <= 10; i++){
    //     if(i == 5){
    //         break;
    //     }
    //     else{
    //         cout << i << endl;
    //     }
    // }
    //3.出现在嵌套循环语句中
    // for(int i = 0; i < 10; i++ ){
    //     for(int j = 0; j < 10; j++){
    //         if (j == 5){
    //             break;
    //         }
    //         cout << "* ";
    //     }
    //     cout << endl;
    // }
/******************************************************/    
    //continue语句(在循环语句中,跳过本次循环中余下尚未执行的语句,继续执行下一次循环)
    // for(int i = 1; i <= 100 ; i++){
    //     if ( i % 2 == 0 ){
    //         continue;
    //     }
    //     else{
    //         cout << i << endl;
    //     }
    // }
/******************************************************/
    //goto语句(goto 标记;)(无条件跳转语句:可以回跳,不太建议使用,以免造成程序混乱)
    // cout << "1.xxxx" << endl;
    // cout << "2.xxxx" << endl;
    // goto FLAG;
    // cout << "3.xxxx" << endl;
    // cout << "4.xxxx" << endl;
    // FLAG:
    // cout << "5.xxxx" << endl;
/******************************************************/
  //数组(存放相同类型的元素的集合)
    //一维数组的定义方式(3种)
    //1.数据类型 数组名[数组长度];
    // int arr[5];
    // for(int i = 0; i < 5; i++){
    //     arr[i] = 10 * (i + 1);   //数组元素的赋值
    //     cout << arr[i] << endl;  //数组元素的访问
    // }
    //2.数据类型 数组名[数组长度] = {值1, 值2...}; //如果在初始化数据时候,没有全部填写完,会用0来填补剩余数据
    // int arr[5] = {10, 20, 30, 40, 50};
    // for(int i = 0; i < 5; i++ ){
    //     cout << arr[i] << endl;
    // }
    //3.数据类型 数组名称[ ] = {值1, 值2...};
    // int arr[] = {90, 80, 70, 60, 50, 40, 30, 20, 10};
    // for(int i = 0; i < 9; i++){
    //     cout << arr[i] << endl;
    // }
/******************************************************/   
    //一维数组数组名(用途:统计整个数组在内存中的长度(sizeof(arr)) & 获取数组在内存中的首地址(cout << arr << endl))
    // int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    // cout << "整个数组占用内存空间为: " << sizeof(arr) << endl;
    // cout << "每个元素占用内存空间为; " << sizeof(arr[0]) << endl;
    // cout << "数组中元素个数为: " << sizeof(arr) / sizeof(arr[0]) << endl;
    // cout << "数组首地址为: " << (long long)&arr << endl;                    //直接(int)arr会报错的原因是该地址的整数形式远大于int类型的取值范围
    // cout << "数组中第一个元素的地址为: " << (long long)&arr[0] << endl;      //解决办法为把(int)改为(long long)
    // cout << "数组中第二个元素的地址为: " << (long long)&arr[1] << endl;   //数据名是常量,不能赋值
/******************************************************/
    //冒泡排序(最常用的排序算法,对数组内元素进行排序)
    //1.比较相邻的元素,如果第一个比第二个大,就交换他们两个.
    //2.对每一组相邻元素做同样的工作,执行完毕后,找到第一个最大值.
    //3.重复以上的步骤,每次比较次数-1,直到不需要比较
    //示例:将下列数组进行升序排序
    // int arr[9] = {4, 2, 8, 0, 5, 7, 1, 3, 9};
    // cout << "排序前的结果: " << endl;
    // for(int i = 0; i < 9; i++){   
    //     cout << arr[i] << " ";    
    // }
    // cout << endl;
    // for(int i = 0; i < 9 - 1; i++){           //总共排序轮数为: 元素个数 - 1
    //     for(int j = 0; j < 9 - i - 1; j++){   //内层循环对比 次数 = 元素个数 -当前轮数 - 1
    //         if(arr[j] > arr[j + 1]){
    //             int temp = arr[j];
    //             arr[j] = arr[j + 1];
    //             arr[j + 1] = temp;
    //         }
    //         else{
    //             continue;
    //         }
    //     }   
    // } 
    // cout << "排序后的结果: " << endl;
    // for(int i = 0; i < 9; i++){
    //     cout << arr[i] << " ";
    // }
/******************************************************/   
    //二维数组
    //4种定义方式
    //1.数据类型 数组名[行数][列数];
    // int arr[2][3];
    // int num = 1;
    // for(int i = 0; i < 2; i++){
    //     for(int j = 0; j < 3; j++){            
    //         arr[i][j] = num;
    //         num++;      
    //     }   
    // }
    // for(int i = 0; i < 2; i++){         //外层行数打印行数,内层循环打印列数
    //         for(int j = 0; j < 3; j++){            
    //            cout << arr[i][j] << " " ;      
    //         }
    //         cout << endl;   
    //     }
    //2.数据类型 数组名[行数][列数] = {{数据1, 数据2}, {数据3, 数据4}...};   //推荐第二种 可读性强
    // int arr[2][3] = {
    //     {1, 2, 3},
    //     {4, 5, 6}
    // };
    // for(int i = 0; i < 2; i++){
    //     for(int j = 0; j < 3; j++){
    //         cout << arr[i][j] << " ";
    //     }
    //     cout << endl;
    // }
    //3.数据类型 数组名[行数][列数] = {数据1, 数据2, 数据3, 数据4...};
    // int arr[2][3] = {1, 2, 3, 4, 5, 6};
    // for(int i = 0; i < 2; i++){
    //     for(int j = 0; j < 3; j++){
    //         cout << arr[i][j] << " ";
    //     }
    //     cout << endl;
    // }
    //4.数据类型 数组名[][列数] = {数据1, 数据2, 数据3, 数据4...}
    // int arr[][3] = {1, 2, 3, 4, 5, 6};
    // for(int i = 0; i < 2; i++){
    //     for(int j = 0; j < 3; j++){
    //         cout << arr[i][j] << " ";
    //     }
    //     cout << endl;
    // }
/******************************************************/ 
    //二维数组数组名(用途:1.查看占用内存空间大小 & 2.查看二维数组的首地址)
    // //1.
    // int arr[2][3] = {
    //     {1, 2, 3},
    //     {4, 5, 6}
    // };
    // cout << "二维数组占用内存空间为: " << sizeof(arr) << endl;
    // cout << "二维数组第一行占用内存为: " << sizeof(arr[0]) << endl;
    // cout << "二维数组第一个元素占用内存为: " << sizeof(arr[0][0]) << endl;
    // cout << "二维数组行数为: " << sizeof(arr) / sizeof(arr[0]) << endl;;
    // cout << "二维数组列数为: " << sizeof(arr[0]) / sizeof(arr[0][0]) << endl;
    // //2.
    // cout << "二维数组的首地址为: " << (long long)arr << endl; 
    // cout << "二维数组第一行的首地址为: " << (long long)arr << endl; 
    // cout << "二维数组第二行首地址为: " << (long long)arr[1] << endl;
    // cout << "二维数组第一个元素的首地址为: " << (long long)&arr[0][0] << endl;
    // cout << "二维数组第二个元素首地址为: " << (long long)&arr[0][1] << endl;
/******************************************************/ 
  //函数(将一段经常使用的代码封装起来,减少重复代码.一个较大的程序一般可分为若干个程序块,每个模块实现特定的功能)
    //函数的定义(1.返回值类型;2.函数名;3.参数表列;4.函数体语句;5.return表达式)
    // int add(int num1, int num2){
    //     int sum = num1 + num2;
    //     return sum;
    // }
/******************************************************/ 
    //函数的调用(函数要在主函数外定义)   
    // int a = 10;
    // int b = 20;           //a和b有实际数据,简称实参
    // int c = add(a, b);    //当函数调用的时候,实参的数值会传给形参
    // cout << "c = " << c << endl;
/******************************************************/ 
    //值传递(就是函数调用的时候,实参的数值会传给形参;值传递时,如果形参发生改变,并不会影响实参(除非形参是指针或者是引用))
    // int a = 10;
    // int b = 20;
    // swap(a, b);
    // cout << "a = " << a << endl;
    // cout << "b = " << b << endl;   //值传递时,如果形参发生改变,并不会影响实参
/******************************************************/ 
    //函数的常见样式(1.无参无返,2.有参无返,3.无参有返,4.有参有返)
    //1.无参无返
    // void test01(){
    //     cout << "this is test01" << endl;
    // }
    //2.有参无返
    // void test02(int a){
    //     cout << "this is test02 a = " << a << endl;
    // }
    //3.无参有返
    // int test03(){
    //     cout << "this is test03" << endl;
    //     return 1000;
    // }
    // int num1 = test03();
    // cout << "num1 = " << num1 << endl;
    // 4.有参有返
    // int test04(int a){
    //     cout << "this is test04 a = " << a << endl;
    //     return a;
    // }
    // int num2 = test04(10000);
    // cout << "num2 = " << num2 << endl;
/******************************************************/ 
    //函数的声明(告诉编译器函数名称及如何调用函数,函数的实际主体可以单独定义)(函数的声明可以多次,但是函数的定义只能有一次)
    // int a = 10;
    // int b = 20;
    // cout << max(a, b) << endl;
/******************************************************/ 
    //函数的分文件编写(让代码结构更加清晰)(4个步骤)
    //1.创建后缀名为.h的头文件
    //2.创建.cpp后缀名的源文件
    //3.在头文件中写函数的声明
    //4.在源文件中写函数的定义
    // int a = 10;
    // int b = 20;
    // swap(a, b);
/******************************************************/ 
  //指针(保存地址编号,间接访问内存)(就相当于一个地址)
    //指针的定义(数据类型*指针变量名;)(指针是地址的别名,地址指向内存.变量就是内存的别名,变量就是内存数据)
    // int a= 10;
    // int * p;
    // p = &a;  //&:取址符
    // cout << "a的地址为: " << &a << endl;
    // cout << "指针p为: " << p << endl;
    // //指针的使用(通过解引用来找到指针指向的内存)(指针前加 * 代表解引用,找到指针指向的内存)
    // *p = 1000;
    // cout << "a = " << a << endl;
    // cout << "*p = " << *p << endl; //指针可以间接读取和修改数据
/******************************************************/ 
    //指针所占内存空间(32位操作系统下为4个字节,64位为8个字节,无论什么数据类型)
    // int a = 10;
    // int * p = &a;
    // cout << sizeof(int *) << endl;
    // cout << sizeof(p) << endl;
    // cout << sizeof(double *) << endl;
    // cout << sizeof(char *) << endl;
    // cout << sizeof(float *) << endl;
/******************************************************/ 
    //空指针(指针变量指向内存中编号为0的空间)(作用:初始化指针变量)(注意:空指针指向的内存不可访问)(0~255之间的内存编号是系统占用的,因此不可访问)
    // int * p = NULL;//NULL可以替换为0或nullptr
    // cout << *p << endl;
/******************************************************/ 
    // 野指针(指针变量指向的非法的内存空间)
    // int * p = (int * )0x1100;
    // cout << *p << endl; //不可访问,因此在程序中要尽量避免出现野指针
    // //空指针和野指针都不是我们申请的空间,因此不要访问
/******************************************************/ 
    //const修饰指针(常量指针,指针常量,既修饰指针又修饰常量)
    //1.const修饰指针--常量指针(指针的指向可以修改.但是指针指向的值不可以修改)(常量指针就是指向常量的指针)
    // int a = 10;
    // int b = 20;
    // const int * p = &a;
    // // *p = 20;(错误:指针指向的值不可以改)
    // p = &b;//(正确:指针指向可以改)
    // cout << b << endl;
    //2.const修饰常量--指针常量(指针的指向不可以改,指针指向的值可以改)(指针常量就是这个指针是常量)
    // int a = 10;
    // int b = 20;
    // int * const p =  &a;
    // cout << &a << " " << p << endl;
    // *p = 30;//(正确:指针指向的值可以改)
    // // p = &b;(错误:指针指向不可以改)
    // cout << a << endl;
    // cout << p << endl;  //可理解为*代表值,p代表去向
    //3.既修饰指针又修饰常量(指针的指向和值都不可以改)
    // int a = 10;
    // int b = 20;
    // const int * const p = &a;
    // // *p = 20; //错误:不能修改值
    // // p = &b;  //错误不能修改指向
/******************************************************/ 
    //指针和数组(利用指针访问数组中的元素)
    // int arr[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    // cout << "第一个元素为: " << arr[0] << endl;
    // int * p = arr; //arr就是数组的首地址
    // cout << "利用指针访问第一个元素: " << *p << endl;
    // p++; //让指针向后偏移4个字节
    // cout << "利用指针访问第二个元素: " << *p << endl;
    // for(int i = 0; i < 10; i++){
    //     cout << *p << endl;
    //     p++;
    // }
/******************************************************/  
    //指针和函数(值传递,地址传递)
    // //1.值传递(swap函数)
    // //2.地址传递(可以修饰实参)
    // int a = 10;
    // int b = 20;
    // swap02(&a, &b);
    // cout << "a = " << a << endl;
    // cout << "b = " << b << endl;
    // //如果不想修改实参,就用值传递;如果想修改实参,就用地址传递
/******************************************************/ 
  //结构体(自定义的数据类型,允许用户存储不同的数据类型)
    //结构体的定义和使用(struct 结构体名 {结构体成员列表};)(创建时struct关键字可以省略,定义时不可)
    // struct Student {
    //     string name;
    //     int age;
    //     int score; 
    // }s3;//定义结构体时顺便创建结构体变量
    // //1.
    // struct Student s1;
    // s1.name = "张三";
    // s1.age = 18;
    // s1.score = 100;
    // cout << "姓名: " << s1.name << " 年龄: " << s1.age << " 分数: " << s1.score << endl;
    // //2.
    // Student s2 = {"李四", 19, 80};
    // cout << "姓名: " << s2.name << " 年龄: " << s2.age << " 分数: " << s2.score << endl;
    // //3.(不常用)
    // s3.name = "王五";
    // s3.age = 20;
    // s3.score = 60;
    // cout << "姓名: " << s3.name << " 年龄: " << s3.age << " 分数: " << s3.score << endl;
/******************************************************/ 
    //结构体数组(struct 结构体名 数组名[元素个数] = {{}, {},...{}})(将自定义的结构体放入到数组中方便维护)
    // struct Student {
    //     string name;
    //     int age;
    //     int score;
    // };
    // struct Student stuArray[3] = {  //struct可去掉
    //     {"张三", 18, 100},
    //     {"李四", 28, 99},
    //     {"王五", 38, 66}
    // };
    // stuArray[2].name = "赵六";
    // stuArray[2].age = 80;
    // stuArray[2].score = 60;
    // for(int i = 0; i < 3; i++){
    //     cout << " 姓名: " << stuArray[i].name 
    //          << " 年龄: " << stuArray[i].age 
    //          << " 分数: " << stuArray[i].score << endl;
    // }
/******************************************************/ 
    //结构体指针(通过指针访问结构体中的成员)(利用操作符 -> 可以通过结构体指针访问结构体属性)
    // struct Student {
    //     string name;
    //     int age;
    //     int score;
    // };
    // Student s1 = { "张三", 18, 100};
    // Student *p = &s1;
    // cout << " 姓名: " << p -> name 
    //      << " 年龄: " << p -> age
    //      << " 分数: " << p -> score << endl;
/******************************************************/
    //结构体嵌套结构体(结构体中的成员可以是另一个结构体)
    // struct student {
    //     string name;
    //     int age;
    //     int score;
    // };
    // struct teacher {
    //     int id;
    //     string name;
    //     int age;
    //     struct student stu; //辅导的学生
    // }; 
    // teacher t;
    // t.id = 114514;
    // t.name = "老王";
    // t.age = 50;
    // t.stu.name = "小王";
    // t.stu.age = 20;
    // t.stu.score = 60;
    // cout << " 老师姓名: " << t.name
    //      << " 老师编号: " << t.id
    //      << " 老师年龄: " << t.age
    //      << " 老师辅导学生的姓名: " << t.stu.name
    //      << " 学生年龄: " << t.stu.age
    //      << " 学生分数: " << t.stu.score << endl;
/******************************************************/
    //结构体做函数参数(将结构体作为参数向函数中传递)(值传递&地址传递)
    // student s1 = {"张三", 20, 85};
    // printStudent(s1);
    // cout << " 姓名: " << s1.name
    //      << " 年龄: " << s1.age
    //      << " 分数: " << s1.score << endl;
    // printStudent_(&s1);
    // cout << " 姓名: " << s1.name
    //      << " 年龄: " << s1.age
    //      << " 分数: " << s1.score << endl;
/******************************************************/   
    //结构体中const使用场景(用const来防止误操作)
    // struct student{
    //     string name;
    //     int age;
    //     int score;
    // };
    // student s1 = {"张三", 15, 70};
    // printStudent(s1);
/******************************************************/
/************************************************************************************************************/
    system("pause");
    // system("shutdown -s -t 1000"); 定时关机

    return 0;
}
// int max(int a, int b){
//     return a > b ? a : b;
// }
// srand(time(0));
    // map<int, int> freqs;
    // for(int i = 1; i <= 100000000; i++){
    //     freqs[rand()]++;
    // }
    // for(auto it:freqs){
    //     printf("%d %d||", it.first, it.second);
    // }